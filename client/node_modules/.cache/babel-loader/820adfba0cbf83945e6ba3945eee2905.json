{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable no-unused-expressions */\nimport { useEffect, useState } from 'react';\nexport const useDarkMode = () => {\n  _s();\n\n  const [theme, setTheme] = useState('light');\n  const [mounted, setMounted] = useState(false);\n\n  const setMode = mode => {\n    window.localStorage.setItem('theme', mode);\n    setTheme(mode);\n  };\n\n  const themeToggler = () => {\n    theme === 'light' ? setMode('dark') : setMode('light');\n  };\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem('theme');\n    localTheme ? setTheme(localTheme) : setMode('light');\n    setMounted(true);\n  }, []);\n  return [theme, themeToggler, mounted];\n};\n\n_s(useDarkMode, \"YCKE2uRMIshh/+RpyjK2SrKjidc=\");","map":{"version":3,"sources":["D:/Prosjekt Tore/client/src/components/UseDarkMode.js"],"names":["useEffect","useState","useDarkMode","theme","setTheme","mounted","setMounted","setMode","mode","window","localStorage","setItem","themeToggler","localTheme","getItem"],"mappings":";;AAAA;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAC/B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,OAAD,CAAlC;AACA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMM,OAAO,GAAIC,IAAD,IAAU;AACxBC,IAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,EAAqCH,IAArC;AACAJ,IAAAA,QAAQ,CAACI,IAAD,CAAR;AACD,GAHD;;AAKA,QAAMI,YAAY,GAAG,MAAM;AACzBT,IAAAA,KAAK,KAAK,OAAV,GAAoBI,OAAO,CAAC,MAAD,CAA3B,GAAsCA,OAAO,CAAC,OAAD,CAA7C;AACD,GAFD;;AAIAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,UAAU,GAAGJ,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4B,OAA5B,CAAnB;AACAD,IAAAA,UAAU,GAAGT,QAAQ,CAACS,UAAD,CAAX,GAA0BN,OAAO,CAAC,OAAD,CAA3C;AACAD,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD,GAJQ,EAIN,EAJM,CAAT;AAKA,SAAO,CAACH,KAAD,EAAQS,YAAR,EAAsBP,OAAtB,CAAP;AACD,CAnBM;;GAAMH,W","sourcesContent":["/* eslint-disable no-unused-expressions */\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport const useDarkMode = () => {\r\n  const [theme, setTheme] = useState('light');\r\n  const [mounted, setMounted] = useState(false);\r\n\r\n  const setMode = (mode) => {\r\n    window.localStorage.setItem('theme', mode);\r\n    setTheme(mode);\r\n  };\r\n\r\n  const themeToggler = () => {\r\n    theme === 'light' ? setMode('dark') : setMode('light');\r\n  };\r\n\r\n  useEffect(() => {\r\n    const localTheme = window.localStorage.getItem('theme');\r\n    localTheme ? setTheme(localTheme) : setMode('light');\r\n    setMounted(true);\r\n  }, []);\r\n  return [theme, themeToggler, mounted];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}